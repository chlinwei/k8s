认证(Authentication)方式:
1)Http token:每一个token及对应的用户名都被存储在Api Server能访问的文件中
2)http base:用户名+密码,用户名+密码使用base64算法进行编码后的字符串放在Http request的header Authorization域里发送给服务器,
  服务器收到后进行编码，获取用用户名及其密码
3)Https证书认证(主要用这种安全性最高):基于CA根证书签名的客户端身份认证方式


安全性说明：
1)Controller Manager,Schedule和Api Server在同一个机器，所以直接使用API Server的非安全端口访问,
--insecure-bind-address=127.0.0.1

2)kubectl,kubelet,kube-proxy访问APi Server就需要证书进行HTTPS双向认证

证书颁发:
1)手动签发:通过k8s集群跟ca进行签发HTTPS证书
2)自动签发:kubelet首次访问API server时，使用token做认证,通过后，controller Manager会
  为kubelet生成一个证书，以后就用这个认证做认证了



kubeconfig:
kubeconfig文件包含集群参数(CA证书,API server地址),客户端参数(上面生成的证书和私钥),
集群context(集群名称，用户名),kubernetes组件通过启动时指定不同的kubeconfig文件可以切换到不同的集群,~/.kube/config文件就时
kubeconfig



ServiceAccount:
Pod中的容器访问apiServer,因为Pod的创建和销毁时动态的，所以要为它手动生成认证就不可行了,
kubernetes使用ServiceAccount解决Pod访问Api Server认证的问题

每个namespace都有一个ServiceAccount:/run/secrets/kubernetes.io/

